작업 ID,상위 작업 ID,작업 내용,선행 조건,결과물,예상 소요 시간 (일),담당자
1,,"1. 프로젝트 초기 설정 (Project Setup)",,,"",
1.1,1,"1.1. 개발 환경 구성",,,"",
1.1.1,1.1,"1.1.1. Java 17 설치 및 설정",,"Java 17 개발 환경 (JDK, JRE) 구성 완료",1,
1.1.2,1.1,"1.1.2. IntelliJ IDEA 설치 및 기본 설정",,"IDE 설치 및 기본 개발 설정 완료",1,
1.1.3,1.1,"1.1.3. Git / GitHub 계정 설정 및 레포지토리 초기화",,"Git 로컬 설정 및 GitHub 레포지토리 생성 및 초기 커밋",0.5,
1.1.4,1.1,"1.1.4. Docker Desktop 설치 및 초기 설정",,"Docker 실행 환경 구성 완료",0.5,
1.2,1,"1.2. Spring Boot 프로젝트 초기화",,,"",
1.2.1,1.2,"1.2.1. Spring Initializr를 통한 프로젝트 생성","1.1.1, 1.1.2","기본적인 Spring Boot 프로젝트 스켈레톤 생성",0.5,
1.2.2,1.2,"1.2.2. 필요한 의존성 추가 (Spring Web, JPA, Security, Thymeleaf, MySQL/PostgreSQL Driver 등)","1.2.1","`pom.xml` 또는 `build.gradle`에 필요한 의존성 추가 완료",0.5,
1.2.3,1.2,"1.2.3. 기본 패키지 구조 및 설정 파일 생성","1.2.2","애플리케이션 초기 구조 및 `application.properties` 등 설정 파일 생성",0.5,
2,,"2. 데이터베이스 및 JPA 설정 (Database & JPA Setup)",,,"",
2.1,2,"2.1. RDBMS 선택 및 설치 (로컬)",,,"",
2.1.1,2.1,"2.1.1. MySQL 또는 PostgreSQL 설치 및 기본 DB/유저 생성","1.1.4 (Docker 활용 시)","로컬 DB 서버 실행 및 프로젝트용 데이터베이스, 사용자 계정 생성",1,
2.1.2,2.1,"2.1.2. DB Client (DBeaver, DataGrip 등) 설치 및 연동 확인","2.1.1","DB Client를 통한 DB 접속 및 기본 기능 확인",0.5,
2.2,2,"2.2. JPA 초기 설정",,,"",
2.2.1,2.2,"2.2.1. `application.properties`에 DB 접속 정보 설정","1.2.2 (JPA 의존성 추가), 2.1.1","Spring Boot와 DB 간 연동 설정 완료",0.5,
2.2.2,2.2,"2.2.2. JPA AuditorAware 설정 (선택 사항)","2.2.1","엔티티 자동 생성/수정 시간 기록 설정 완료",0.5,
3,,"3. 사용자 인증 및 인가 (User Authentication & Authorization)",,,"",
3.1,3,"3.1. 사용자 엔티티 및 리포지토리 설계",,,"",
3.1.1,3.1,"3.1.1. `User` 엔티티 정의 (ID, Password, Roles 등)","2.2.2","`User` 엔티티 클래스 및 JPA 어노테이션 정의 완료",1,
3.1.2,3.1,"3.1.2. `UserRepository` 인터페이스 정의","3.1.1","`UserRepository` 인터페이스 (Spring Data JPA) 정의 완료",0.5,
3.2,3,"3.2. 회원가입 기능 구현",,,"",
3.2.1,3.2,"3.2.1. 회원가입 요청 DTO 및 응답 DTO 정의","3.1.2","회원가입 관련 DTO 클래스",0.5,
3.2.2,3.2,"3.2.2. `UserService`에서 회원가입 로직 구현 (비밀번호 암호화 포함)","3.2.1","비밀번호 암호화 및 사용자 저장 로직 구현",1.5,
3.2.3,3.2,"3.2.3. 회원가입 REST API 컨트롤러 구현","3.2.2","`/auth/signup` API 엔드포인트 구현 완료",0.5,
3.3,3,"3.3. 로그인 및 JWT 발급 기능 구현",,,"",
3.3.1,3.3,"3.3.1. 로그인 요청 DTO 정의","3.2.3","로그인 관련 DTO 클래스",0.5,
3.3.2,3.3,"3.3.2. Spring Security 설정 (FilterChain, PasswordEncoder)","1.2.2 (Security 의존성 추가)","Spring Security 기본 설정 및 `PasswordEncoder` 빈 등록",1,
3.3.3,3.3,"3.3.3. JWT Provider 및 JWT Filter 구현","3.3.2","JWT 토큰 생성, 유효성 검사, 필터 클래스 구현",1.5,
3.3.4,3.3,"3.3.4. `UserService`에서 로그인 로직 구현 (비밀번호 검증, JWT 발급)","3.3.3","로그인 성공 시 JWT 토큰 발급 로직 구현",1,
3.3.5,3.3,"3.3.5. 로그인 REST API 컨트롤러 구현","3.3.4","`/auth/login` API 엔드포인트 구현 완료",0.5,
3.4,3,"3.4. JWT 기반 인가 처리 구현",,,"",
3.4.1,3.4,"3.4.1. Spring Security 권한 설정 및 JWT 필터 연동","3.3.3","JWT 토큰을 이용한 API 접근 권한 제어 설정 완료",1,
3.4.2,3.4,"3.4.2. 인가 테스트 (Postman 또는 단위 테스트)","3.4.1","인가된/인가되지 않은 요청에 대한 응답 확인",0.5,
4,,"4. PTCF 모델 CRUD API 개발 (PTCF Model CRUD API)",,,"",
4.1,4,"4.1. Persona 엔티티 및 리포지토리 개발",,,"",
4.1.1,4.1,"4.1.1. `Persona` 엔티티 정의 (ID, Name, Description 등)","3.4.2","`Persona` 엔티티 클래스 및 JPA 어노테이션",1,
4.1.2,4.1,"4.1.2. `PersonaRepository` 인터페이스 정의","4.1.1","`PersonaRepository` 인터페이스",0.5,
4.1.3,4.1,"4.1.3. `Persona` CRUD Service 및 Controller 구현","4.1.2","`Persona` 생성, 조회, 수정, 삭제 API 엔드포인트 구현 및 테스트",2,
4.2,4,"4.2. Task 엔티티 및 리포지토리 개발",,,"",
4.2.1,4.2,"4.2.1. `Task` 엔티티 정의 (ID, Name, Description 등)","4.1.3","`Task` 엔티티 클래스 및 JPA 어노테이션",1,
4.2.2,4.2,"4.2.2. `TaskRepository` 인터페이스 정의","4.2.1","`TaskRepository` 인터페이스",0.5,
4.2.3,4.2,"4.2.3. `Task` CRUD Service 및 Controller 구현","4.2.2","`Task` 생성, 조회, 수정, 삭제 API 엔드포인트 구현 및 테스트",2,
4.3,4,"4.3. Context 엔티티 및 리포지토리 개발",,,"",
4.3.1,4.3,"4.3.1. `Context` 엔티티 정의 (ID, Name, Description 등)","4.2.3","`Context` 엔티티 클래스 및 JPA 어노테이션",1,
4.3.2,4.3,"4.3.2. `ContextRepository` 인터페이스 정의","4.3.1","`ContextRepository` 인터페이스",0.5,
4.3.3,4.3,"4.3.3. `Context` CRUD Service 및 Controller 구현","4.3.2","`Context` 생성, 조회, 수정, 삭제 API 엔드포인트 구현 및 테스트",2,
4.4,4,"4.4. Format 엔티티 및 리포지토리 개발",,,"",
4.4.1,4.4,"4.4.1. `Format` 엔티티 정의 (ID, Name, Description 등)","4.3.3","`Format` 엔티티 클래스 및 JPA 어노테이션",1,
4.4.2,4.4,"4.4.2. `FormatRepository` 인터페이스 정의","4.4.1","`FormatRepository` 인터페이스",0.5,
4.4.3,4.4,"4.4.3. `Format` CRUD Service 및 Controller 구현","4.4.2","`Format` 생성, 조회, 수정, 삭제 API 엔드포인트 구현 및 테스트",2,
5,,"5. 프롬프트 생성 및 관리 API 개발 (Prompt Generation & Management API)",,,"",
5.1,5,"5.1. Prompt 엔티티 및 리포지토리 설계",,,"",
5.1.1,5.1,"5.1.1. `Prompt` 엔티티 정의 (ID, Title, Content, PTCF 요소 연관관계, User 연관관계 등)","4.4.3","`Prompt` 엔티티 클래스 및 JPA 어노테이션 (PTCF 및 User와의 관계 정의)",1.5,
5.1.2,5.1,"5.1.2. `PromptRepository` 인터페이스 정의","5.1.1","`PromptRepository` 인터페이스",0.5,
5.2,5,"5.2. 프롬프트 생성 기능 구현",,,"",
5.2.1,5.2,"5.2.1. 프롬프트 생성 요청 DTO 정의 (PTCF ID 포함)","5.1.2","프롬프트 생성 관련 DTO 클래스",0.5,
5.2.2,5.2,"5.2.2. `PromptService`에서 프롬프트 생성 로직 구현","5.2.1","PTCF 요소 조합 및 프롬프트 저장 로직 구현",1.5,
5.2.3,5.2,"5.2.3. 프롬프트 생성 REST API 컨트롤러 구현","5.2.2","`/prompts` (POST) API 엔드포인트 구현",0.5,
5.3,5,"5.3. 프롬프트 조회 및 관리 기능 구현",,,"",
5.3.1,5.3,"5.3.1. 사용자별 프롬프트 목록 조회 API 구현","5.2.3","`/prompts` (GET) API 엔드포인트 (사용자 ID 기반)",1,
5.3.2,5.3,"5.3.2. 특정 프롬프트 상세 조회 API 구현","5.3.1","`/prompts/{id}` (GET) API 엔드포인트",0.5,
5.3.3,5.3,"5.3.3. 프롬프트 수정 API 구현","5.3.2","`/prompts/{id}` (PUT/PATCH) API 엔드포인트",1,
5.3.4,5.3,"5.3.4. 프롬프트 삭제 API 구현","5.3.3","`/prompts/{id}` (DELETE) API 엔드포인트",0.5,
5.4,5,"5.4. 프롬프트 검색 및 필터링 기능 구현",,,"",
5.4.1,5.4,"5.4.1. 키워드 검색 기능 (제목, 내용 등)","5.3.4","검색 파라미터를 포함한 프롬프트 목록 조회 API 확장",1,
5.4.2,5.4,"5.4.2. 필터링 기능 (생성일, 수정일 등)","5.4.1","필터링 파라미터를 포함한 프롬프트 목록 조회 API 확장",1,
6,,"6. 프론트엔드 (Thymeleaf) 개발 (Frontend Development)",,,"",
6.1,6,"6.1. 기본 레이아웃 및 템플릿 설정",,,"",
6.1.1,6.1,"6.1.1. Thymeleaf 의존성 추가 및 기본 템플릿 파일 생성","1.2.2 (Thymeleaf 의존성 추가)","`src/main/resources/templates` 폴더에 기본 레이아웃 템플릿 파일 생성",1,
6.1.2,6.1,"6.1.2. 정적 자원 (CSS, JS) 설정","6.1.1","`src/main/resources/static` 폴더에 CSS/JS 파일 및 설정 완료",0.5,
6.2,6,"6.2. 사용자 인증 관련 페이지 개발",,,"",
6.2.1,6.2,"6.2.1. 로그인 페이지 구현 (폼 제출, API 연동)","3.3.5","로그인 HTML 페이지 및 백엔드 로그인 API 연동",1.5,
6.2.2,6.2,"6.2.2. 회원가입 페이지 구현 (폼 제출, API 연동)","3.2.3","회원가입 HTML 페이지 및 백엔드 회원가입 API 연동",1.5,
6.3,6,"6.3. PTCF 모델 관리 페이지 개발",,,"",
6.3.1,6.3,"6.3.1. Persona/Task/Context/Format 목록 조회 및 상세 페이지 구현","4.1.3, 4.2.3, 4.3.3, 4.4.3","각 PTCF 요소별 목록 및 상세 페이지 (Thymeleaf 반복문, 조건문 활용)",2,
6.3.2,6.3,"6.3.2. Persona/Task/Context/Format 생성/수정 폼 구현","6.3.1","각 PTCF 요소별 데이터 입력/수정 폼 및 API 연동",2,
6.4,6,"6.4. 프롬프트 생성 및 관리 페이지 개발",,,"",
6.4.1,6.4,"6.4.1. 프롬프트 생성 폼 구현 (PTCF 선택 드롭다운 연동)","5.2.3, 6.3.2","PTCF 요소 선택 및 프롬프트 내용 입력 폼",2,
6.4.2,6.4,"6.4.2. 프롬프트 목록 페이지 구현 (테이블, 검색/필터링 UI)","5.3.1, 5.4.2","프롬프트 목록 조회 및 검색/필터링 UI",2,
6.4.3,6.4,"6.4.3. 프롬프트 상세 조회 및 수정/삭제 UI 구현","5.3.4","프롬프트 상세 내용 표시 및 수정/삭제 버튼 UI",1.5,
6.5,6,"6.5. 반응형 웹 디자인 적용",,,"",
6.5.1,6.5,"6.5.1. CSS 미디어 쿼리 또는 CSS 프레임워크 (Bootstrap 등) 적용","6.4.3","PC 및 모바일 환경에서 보기 좋은 레이아웃",1.5,
7,,"7. 컨테이너화 및 배포 (Containerization & Deployment)",,,"",
7.1,7,"7.1. Dockerfile 작성",,,"",
7.1.1,7.1,"7.1.1. Spring Boot 애플리케이션 Dockerfile 작성","6.5.1","애플리케이션 빌드 및 실행 가능한 Dockerfile",1,
7.1.2,7.1,"7.1.2. Docker 이미지 빌드 및 로컬 테스트","7.1.1","Docker 이미지 생성 및 `docker run`으로 애플리케이션 실행 확인",0.5,
7.2,7,"7.2. Docker Compose 환경 구축 (개발/테스트용)",,,"",
7.2.1,7.2,"7.2.1. 애플리케이션 및 RDBMS를 포함하는 `docker-compose.yml` 작성","7.1.2","`docker-compose up`으로 전체 스택 실행 가능한 파일",1.5,
7.3,7,"7.3. AWS 계정 및 리소스 설정",,,"",
7.3.1,7.3,"7.3.1. AWS 계정 생성 및 IAM 사용자/권한 설정",,"AWS 계정 및 필요한 IAM 사용자/정책 생성",1,
7.3.2,7.3,"7.3.2. AWS EC2 또는 Elastic Beanstalk 환경 생성","7.3.1","애플리케이션 배포를 위한 AWS 환경 구성 완료",1.5,
7.3.3,7.3,"7.3.3. AWS RDS (관계형 데이터베이스 서비스) 설정","7.3.1","클라우드 기반 RDBMS 인스턴스 생성 및 접근 설정",1,
7.3.4,7.3,"7.3.4. EC2/EB와 RDS 간 연결 확인 및 보안 그룹 설정","7.3.2, 7.3.3","애플리케이션 서버와 DB 간 네트워크 통신 설정 완료",0.5,
7.4,7,"7.4. CI/CD 파이프라인 구축 (Github Actions)",,,"",
7.4.1,7.4,"7.4.1. `.github/workflows` 폴더에 CI/CD 워크플로우 YAML 파일 작성","7.3.4","빌드, 테스트, Docker 이미지 생성, AWS ECR 푸시 등 자동화 스크립트",2,
7.4.2,7.4,"7.4.2. AWS 배포 스크립트 작성 (예: CodeDeploy 또는 ECS 배포)","7.4.1","AWS 환경으로 Docker 이미지를 배포하는 스크립트",1.5,
7.4.3,7.4,"7.4.3. CI/CD 파이프라인 테스트 및 디버깅","7.4.2","코드 푸시 시 자동 빌드, 테스트, 배포 성공 확인",1,
8,,"8. 테스트 및 문서화 (Testing & Documentation)",,,"",
8.1,8,"8.1. 백엔드 API 테스트",,,"",
8.1.1,8.1,"8.1.1. Postman 또는 Swagger UI를 이용한 기능별 API 테스트","5.4.2","모든 API 엔드포인트의 정상 작동 확인",2,
8.1.2,8.1,"8.1.2. 단위 테스트 및 통합 테스트 코드 작성 (주요 비즈니스 로직)","5.4.2","Junit/Mockito 기반 테스트 코드 작성 및 통과",2,
8.2,8,"8.2. 프론트엔드 UI/UX 테스트",,,"",
8.2.1,8.2,"8.2.1. 각 페이지별 UI/UX 기능 동작 확인","6.5.1","모든 웹 페이지의 기능 및 디자인 정상 작동 확인",1.5,
8.2.2,8.2,"8.2.2. 반응형 디자인 테스트 (다양한 디바이스/브라우저)","6.5.1","다양한 화면 크기에서의 레이아웃 및 기능 정상 작동 확인",1,
8.3,8,"8.3. 문서화",,,"",
8.3.1,8.3,"8.3.1. API 명세서 업데이트 (Swagger 또는 Postman Collection)","8.1.1","최신 API 명세서 작성 및 공유",1,
8.3.2,8.3,"8.3.2. 프로젝트 개발 보고서 작성","모든 개발 작업 완료","프로젝트 목표, 기능, 사용 기술, 과정, 성과 등을 담은 보고서",2,
8.3.3,8.3,"8.3.3. 취업 포트폴리오 문서 정리 및 보완","8.3.2","GitHub README, 개인 블로그 등 포트폴리오 자료 최종 정리",1.5,